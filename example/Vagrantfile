# enable typed triggers.
# NB this is needed to modify the libvirt domain scsi controller model to virtio-scsi.
ENV['VAGRANT_EXPERIMENTAL'] = 'typed_triggers'

VM_CPUS = 4
VM_MEMORY_MB = 4*1024
VM_OS_DISK_GB = 200

require 'open3'

Vagrant.configure(2) do |config|
  config.vm.box = 'windows-2022-amd64'
  #config.vm.box = 'windows-2022-uefi-amd64'
  #config.vm.box = 'windows-11-22h2-amd64'
  #config.vm.box = 'windows-11-22h2-uefi-amd64'

  config.vm.hostname = 'example'

  config.vm.provider 'libvirt' do |lv, config|
    lv.default_prefix = "#{File.basename(File.dirname(File.dirname(__FILE__)))}_example_"
    lv.memory = VM_MEMORY_MB
    lv.cpus = VM_CPUS
    lv.cpu_mode = 'host-passthrough'
    lv.keymap = 'pt'
    lv.nested = true
    lv.disk_bus = 'scsi'
    lv.disk_device = 'sda'
    lv.disk_driver :discard => 'unmap', :cache => 'unsafe'
    lv.machine_virtual_size = VM_OS_DISK_GB
    config.trigger.before :'VagrantPlugins::ProviderLibvirt::Action::StartDomain', type: :action do |trigger|
      trigger.ruby do |env, machine|
        # modify the scsi controller model to virtio-scsi.
        # see https://github.com/vagrant-libvirt/vagrant-libvirt/pull/692
        # see https://github.com/vagrant-libvirt/vagrant-libvirt/issues/999
        stdout, stderr, status = Open3.capture3(
          'virt-xml', machine.id,
          '--edit', 'type=scsi',
          '--controller', 'model=virtio-scsi')
        if status.exitstatus != 0
          raise "failed to run virt-xml to modify the scsi controller model. status=#{status.exitstatus} stdout=#{stdout} stderr=#{stderr}"
        end
      end
    end
    config.vm.synced_folder '.', '/vagrant',
      type: 'smb',
      smb_username: ENV['VAGRANT_SMB_USERNAME'] || ENV['USER'],
      smb_password: ENV['VAGRANT_SMB_PASSWORD']
    # example rsync synced folder.
    # this is used for testing whether rsync is working correctly.
    config.vm.synced_folder '.', '/vagrant-rsync', type: 'rsync', rsync__exclude: [
      '.vagrant/',
      '.git/',
      '*.box']
  end

  # XXX for some reason, windows crashes on boot, stating "inaccessible boot device".
  # TODO set the disk size.
  # NB this only works in a macos host.
  config.vm.provider 'qemu' do |qe, config|
    qe.qemu_dir = '/usr/local/bin'
    qe.arch = 'x86_64'
    qe.machine = 'q35,accel=hvf'
    #qe.cpu = 'host-passthrough'
    #qe.smp = "cpus=#{VM_CPUS},sockets=1,cores=#{VM_CPUS},threads=1"
    #qe.memory = VM_MEMORY_MB
    qe.net_device = 'virtio-net-pci'
    # XXX this is required to prevent the bug described at https://github.com/ppggff/vagrant-qemu/issues/39
    #     see https://github.com/ppggff/vagrant-qemu/blob/v0.3.4/lib/vagrant-qemu/action/start_instance.rb#L48-L52
    #     see https://github.com/hashicorp/vagrant/blob/v2.3.7/plugins/kernel_v2/config/vm.rb#L575-L593
    # NB "disabled: true" is used by the vagrant-qemu plugin, but will be
    #    ignored by vagrant itself, which means that network will still be
    #    used by the vagrant winrm communicator.
    # TODO remove this after https://github.com/ppggff/vagrant-qemu/pull/49 is addressed.
    #config.vm.network 'forwarded_port', id: 'winrm', host_ip: '127.0.0.1', host: 55985, guest: 5985, auto_correct: true, disabled: true
    #config.vm.network 'forwarded_port', id: 'winrm-ssl', host_ip: '127.0.0.1', host: 55986, guest: 5986, auto_correct: true, disabled: true
    #qe.extra_netdev_args = 'hostfwd=tcp:127.0.0.1:55985-:5985'
    qe.no_daemonize = true # NB this is required for the vm display.
    qe.extra_qemu_args = %w(-vga virtio -display cocoa,show-cursor=on)
    config.vm.synced_folder '.', '/vagrant',
      type: 'smb',
      smb_username: ENV['VAGRANT_SMB_USERNAME'] || ENV['USER'],
      smb_password: ENV['VAGRANT_SMB_PASSWORD']
    # example rsync synced folder.
    # this is used for testing whether rsync is working correctly.
    config.vm.synced_folder '.', '/vagrant-rsync', type: 'rsync', rsync__exclude: [
      '.vagrant/',
      '.git/',
      '*.box']
  end

  config.vm.provider 'virtualbox' do |vb, config|
    vb.linked_clone = true
    vb.memory = VM_MEMORY_MB
    vb.cpus = VM_CPUS
  end

  config.vm.provider 'hyperv' do |hv, config|
    hv.vmname = "#{File.basename(File.dirname(File.dirname(__FILE__)))}-example"
    hv.linked_clone = true
    hv.memory = VM_MEMORY_MB
    hv.cpus = VM_CPUS
    hv.enable_virtualization_extensions = true # nested virtualization.
    hv.vlan_id = ENV['HYPERV_VLAN_ID']
    # see https://github.com/hashicorp/vagrant/issues/7915
    # see https://github.com/hashicorp/vagrant/blob/10faa599e7c10541f8b7acf2f8a23727d4d44b6e/plugins/providers/hyperv/action/configure.rb#L21-L35
    config.vm.network :private_network, bridge: ENV['HYPERV_SWITCH_NAME'] if ENV['HYPERV_SWITCH_NAME']
    config.vm.synced_folder '.', '/vagrant',
      type: 'smb',
      smb_username: ENV['VAGRANT_SMB_USERNAME'] || ENV['USER'],
      smb_password: ENV['VAGRANT_SMB_PASSWORD']
    # example rsync synced folder.
    # this is used for testing whether rsync is working correctly.
    config.vm.synced_folder '.', '/vagrant-rsync', type: 'rsync', rsync__exclude: [
      '.vagrant/',
      '.git/',
      '*.box']
    # configure the hyper-v vm.
    config.trigger.before :'VagrantPlugins::HyperV::Action::StartInstance', type: :action do |trigger|
      trigger.ruby do |env, machine|
        system(
          'PowerShell',
          '-NoLogo',
          '-NoProfile',
          '-NonInteractive',
          '-ExecutionPolicy',
          'Bypass',
          '-Command',
          <<~COMMAND
            $vmName = '#{machine.provider_config.vmname}'
            # resize the os disk.
            $osDisk = Get-VMHardDiskDrive $vmName | Select-Object -First 1
            Resize-VHD -Path $osDisk.Path -SizeBytes #{VM_OS_DISK_GB*1024*1024*1024}
          COMMAND
        )
      end
    end
  end

  config.vm.provider 'vsphere' do |vsphere, config|
    vsphere.name = ENV['VSPHERE_VM_NAME']
    vsphere.notes = "Created from #{__FILE__}"
    vsphere.memory_mb = VM_MEMORY_MB
    vsphere.cpu_count = VM_CPUS
    vsphere.user = ENV['GOVC_USERNAME']
    vsphere.password = ENV['GOVC_PASSWORD']
    vsphere.insecure = true
    vsphere.host = ENV['GOVC_HOST']
    vsphere.data_center_name = ENV['GOVC_DATACENTER']
    vsphere.compute_resource_name = ENV['GOVC_CLUSTER']
    vsphere.data_store_name = ENV['GOVC_DATASTORE']
    vsphere.template_name = ENV['VSPHERE_TEMPLATE_NAME']
    vsphere.vm_base_path = ENV['VSPHERE_VM_FOLDER']
    vsphere.vlan = ENV['VSPHERE_VLAN']
    config.vm.synced_folder '.', '/vagrant',
      type: 'smb',
      smb_username: ENV['VAGRANT_SMB_USERNAME'] || ENV['USER'],
      smb_password: ENV['VAGRANT_SMB_PASSWORD']
    # example rsync synced folder.
    # this is used for testing whether rsync is working correctly.
    config.vm.synced_folder '.', '/vagrant-rsync', type: 'rsync', rsync__exclude: [
      '.vagrant/',
      '.git/',
      '*.box']
  end

  #config.vm.provision "windows-sysprep" # NB the windows-sysprep plugin does not work with hyperv.
  config.vm.provision "shell", path: "ps.ps1", args: "expand-os-partition.ps1"
  config.vm.provision "shell", path: "ps.ps1", args: "provision-chocolatey.ps1"
  config.vm.provision "shell", path: "ps.ps1", args: "provision-adk.ps1"
  config.vm.provision "shell", path: "ps.ps1", args: "mount-system-partition.ps1"
  config.vm.provision "shell", path: "ps.ps1", args: "summary.ps1"
end
